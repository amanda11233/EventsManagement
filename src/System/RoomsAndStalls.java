/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package System;

import Controller.LocationsController;
import Controller.RoomsAndStallsController;
import Model.Location;
import Model.RoomStall;
import View.LocationView;
import View.RoomsAndStallsView;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Random;
import java.util.stream.IntStream;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Amanda
 */
public class RoomsAndStalls extends javax.swing.JFrame {

    /**
     * Creates new form RoomsAndStalls
     */
    public RoomsAndStalls() {
        initComponents();
        custominit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchpanel = new javax.swing.JPanel();
        searchlocationlbl = new javax.swing.JLabel();
        searchlocationtxt = new javax.swing.JComboBox<>();
        searchtypelbl = new javax.swing.JLabel();
        searchtypetxt = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        stallstable = new javax.swing.JTable();
        searchbtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        roomsandstallspanel = new javax.swing.JPanel();
        locationlbl = new javax.swing.JLabel();
        locationtxt = new javax.swing.JComboBox<>();
        sizelbl = new javax.swing.JLabel();
        sizetxt1 = new javax.swing.JTextField();
        typetxt = new javax.swing.JComboBox<>();
        typelbl = new javax.swing.JLabel();
        statuslbl = new javax.swing.JLabel();
        statustxt = new javax.swing.JComboBox<>();
        addbtn = new javax.swing.JButton();
        updatebtn = new javax.swing.JButton();
        backbtn = new javax.swing.JButton();
        deletebtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        idtxt = new javax.swing.JTextField();
        sizetxt2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        areatxt = new javax.swing.JTextField();
        fromtxt = new javax.swing.JComboBox<>();
        fromlbl = new javax.swing.JLabel();
        totxt = new javax.swing.JComboBox<>();
        tolbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        searchlocationlbl.setText("Location");

        searchlocationtxt.setModel(new javax.swing.DefaultComboBoxModel<>());

        searchtypelbl.setText("Type");

        searchtypetxt.setModel(new javax.swing.DefaultComboBoxModel<>());

        stallstable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Number", "Location", "Type", "Size", "From", "To", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        stallstable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stallstableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(stallstable);
        if (stallstable.getColumnModel().getColumnCount() > 0) {
            stallstable.getColumnModel().getColumn(0).setPreferredWidth(20);
        }

        searchbtn.setText("Search");
        searchbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchbtnActionPerformed(evt);
            }
        });

        jButton1.setText("Show Users Attending");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchpanelLayout = new javax.swing.GroupLayout(searchpanel);
        searchpanel.setLayout(searchpanelLayout);
        searchpanelLayout.setHorizontalGroup(
            searchpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(searchpanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(searchpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(searchbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(searchpanelLayout.createSequentialGroup()
                        .addGroup(searchpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(searchtypelbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(searchlocationlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(searchpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(searchlocationtxt, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(searchtypetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        searchpanelLayout.setVerticalGroup(
            searchpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchpanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(searchpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(searchpanelLayout.createSequentialGroup()
                        .addGroup(searchpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(searchlocationlbl, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                            .addComponent(searchlocationtxt))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(searchpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchtypelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchtypetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(searchbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        locationlbl.setText("Location");

        locationtxt.setModel(new javax.swing.DefaultComboBoxModel<>());

        sizelbl.setText("Size");

        sizetxt1.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        typetxt.setModel(new javax.swing.DefaultComboBoxModel<>());

        typelbl.setText("Type");

        statuslbl.setText("Status");

        statustxt.setModel(new javax.swing.DefaultComboBoxModel<>());

        addbtn.setText("Add");
        addbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addbtnActionPerformed(evt);
            }
        });

        updatebtn.setText("Update");

        backbtn.setText("Back");
        backbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbtnActionPerformed(evt);
            }
        });

        deletebtn.setText("Delete");
        deletebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebtnActionPerformed(evt);
            }
        });

        jLabel1.setText("ID");

        idtxt.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        idtxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        sizetxt2.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel2.setText("Length");

        jLabel3.setText("Width");

        areatxt.setEditable(false);
        areatxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        fromtxt.setModel(new javax.swing.DefaultComboBoxModel<>());
        fromtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromtxtActionPerformed(evt);
            }
        });

        fromlbl.setText("From");

        totxt.setModel(new javax.swing.DefaultComboBoxModel<>());
        totxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totxtActionPerformed(evt);
            }
        });

        tolbl.setText("To");

        javax.swing.GroupLayout roomsandstallspanelLayout = new javax.swing.GroupLayout(roomsandstallspanel);
        roomsandstallspanel.setLayout(roomsandstallspanelLayout);
        roomsandstallspanelLayout.setHorizontalGroup(
            roomsandstallspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roomsandstallspanelLayout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addGroup(roomsandstallspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(roomsandstallspanelLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(idtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(roomsandstallspanelLayout.createSequentialGroup()
                        .addComponent(locationlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(locationtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(roomsandstallspanelLayout.createSequentialGroup()
                        .addComponent(typelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(typetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(roomsandstallspanelLayout.createSequentialGroup()
                        .addGroup(roomsandstallspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sizelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(statuslbl, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(roomsandstallspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(roomsandstallspanelLayout.createSequentialGroup()
                                .addGroup(roomsandstallspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(roomsandstallspanelLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(roomsandstallspanelLayout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(sizetxt1)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(roomsandstallspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sizetxt2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(roomsandstallspanelLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(statustxt, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roomsandstallspanelLayout.createSequentialGroup()
                        .addComponent(tolbl, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totxt, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roomsandstallspanelLayout.createSequentialGroup()
                        .addComponent(fromlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(roomsandstallspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(areatxt, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(fromtxt, javax.swing.GroupLayout.Alignment.TRAILING, 0, 177, Short.MAX_VALUE))))
                .addGap(22, 22, 22))
            .addGroup(roomsandstallspanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(roomsandstallspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deletebtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(roomsandstallspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(updatebtn, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                    .addComponent(backbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );
        roomsandstallspanelLayout.setVerticalGroup(
            roomsandstallspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roomsandstallspanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(roomsandstallspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(roomsandstallspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(locationlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(locationtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(roomsandstallspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(typetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(roomsandstallspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(roomsandstallspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sizelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sizetxt1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sizetxt2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(areatxt, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(roomsandstallspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(roomsandstallspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tolbl, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(roomsandstallspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statuslbl, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(statustxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(roomsandstallspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(updatebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(roomsandstallspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deletebtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(backbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(searchpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(roomsandstallspanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(searchpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(roomsandstallspanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addbtnActionPerformed
        
        String location = locationtxt.getSelectedItem().toString();
        String type = typetxt.getSelectedItem().toString();
        String getarea  = areatxt.getText();
        String status = statustxt.getSelectedItem().toString();
         String dayfrom = fromtxt.getSelectedItem().toString();
          String dayto = totxt.getSelectedItem().toString();
        if(getarea.isEmpty()){
            JOptionPane.showMessageDialog(null, "Missing Inputs");
        }
        else
        {
       try{ 
       double lengthvalue = Double.parseDouble(sizetxt1.getText());
       double widthvalue = Double.parseDouble(sizetxt2.getText());
       double area = Double.parseDouble(getarea);
       String size = toString().valueOf(area);
        
        addRoomStalls(location, type, size, dayfrom, dayto, status);
       }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Invalid Size Inputs");
       }
        
        
        }
        
        
        
        
    }//GEN-LAST:event_addbtnActionPerformed

    private void searchbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchbtnActionPerformed
        String location = searchlocationtxt.getSelectedItem().toString();
        String type = searchtypetxt.getSelectedItem().toString();

        search(location, type);
    }//GEN-LAST:event_searchbtnActionPerformed

    private void backbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbtnActionPerformed
        dispose();
    }//GEN-LAST:event_backbtnActionPerformed

    private void stallstableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stallstableMouseClicked
        
        DefaultTableModel getmodel = (DefaultTableModel)stallstable.getModel();
       int selectedRowIndex = stallstable.getSelectedRow();
       
       idtxt.setText(getmodel.getValueAt(selectedRowIndex, 0).toString());
       
       locationtxt.setSelectedItem(getmodel.getValueAt(selectedRowIndex, 2).toString());
       typetxt.setSelectedItem(getmodel.getValueAt(selectedRowIndex, 3).toString());
       statustxt.setSelectedItem(getmodel.getValueAt(selectedRowIndex, 7).toString());
       fromtxt.setSelectedItem(getmodel.getValueAt(selectedRowIndex, 5).toString());
       totxt.setSelectedItem(getmodel.getValueAt(selectedRowIndex, 6).toString());
    }//GEN-LAST:event_stallstableMouseClicked

    private void deletebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletebtnActionPerformed
       String getid = idtxt.getText();
       
       if(getid.isEmpty()){
           JOptionPane.showMessageDialog(null, "No Stall Selected");
       }else{
            int id = Integer.parseInt(getid);
            delete(id);
       }
    }//GEN-LAST:event_deletebtnActionPerformed

    private void fromtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromtxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fromtxtActionPerformed

    private void totxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totxtActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RoomsAndStalls.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RoomsAndStalls.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RoomsAndStalls.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RoomsAndStalls.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RoomsAndStalls().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addbtn;
    private javax.swing.JTextField areatxt;
    private javax.swing.JButton backbtn;
    private javax.swing.JButton deletebtn;
    private javax.swing.JLabel fromlbl;
    private javax.swing.JComboBox<String> fromtxt;
    private javax.swing.JTextField idtxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel locationlbl;
    private javax.swing.JComboBox<String> locationtxt;
    private javax.swing.JPanel roomsandstallspanel;
    private javax.swing.JButton searchbtn;
    private javax.swing.JLabel searchlocationlbl;
    private javax.swing.JComboBox<String> searchlocationtxt;
    private javax.swing.JPanel searchpanel;
    private javax.swing.JLabel searchtypelbl;
    private javax.swing.JComboBox<String> searchtypetxt;
    private javax.swing.JLabel sizelbl;
    private javax.swing.JTextField sizetxt1;
    private javax.swing.JTextField sizetxt2;
    private javax.swing.JTable stallstable;
    private javax.swing.JLabel statuslbl;
    private javax.swing.JComboBox<String> statustxt;
    private javax.swing.JLabel tolbl;
    private javax.swing.JComboBox<String> totxt;
    private javax.swing.JLabel typelbl;
    private javax.swing.JComboBox<String> typetxt;
    private javax.swing.JButton updatebtn;
    // End of variables declaration//GEN-END:variables
    
    private String[] typeOptions = {"Stall", "Room"};
    private String[] statusOptions = {"Available", "Booked"};
    private String[] days = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
    public static DefaultTableModel stalltablemodel ;
    private DefaultTableModel gettablemodel;
    
    private void custominit(){
        Location locationmodel = new Location();
        LocationView locationview = new LocationView();
        
        LocationsController locationscontroller = new LocationsController(locationmodel, locationview);
         int j = 0;
        for(int i = 1; i < locationscontroller.getAllLocation().size(); i = i + 4){
           if(i >= locationscontroller.getAllLocation().size()){
               
           }else{
             searchlocationtxt.addItem( locationscontroller.getAllLocation().get(i).toString());
             locationtxt.addItem( locationscontroller.getAllLocation().get(i).toString());
           }
                   
        }
        for(int i = 0; i < typeOptions.length; i++){
        typetxt.addItem(typeOptions[i]);   
        searchtypetxt.addItem(typeOptions[i]);
        }
        for(int i = 0; i < statusOptions.length; i++){
        statustxt.addItem(statusOptions[i]);    
        }
        for(int i = 0; i < days.length; i++){
        fromtxt.addItem(days[i]);  
        totxt.addItem(days[i]); 
        }
        idtxt.setEditable(false);
       stalltablemodel = new DefaultTableModel(){
         @Override
         public boolean isCellEditable(int row, int column){
             return false;
         }
     };
       gettablemodel = (DefaultTableModel) stallstable.getModel();
       gettablemodel.setRowCount(0);
            
        stalltablemodel.addColumn("ID");
        stalltablemodel.addColumn("Number");
        stalltablemodel.addColumn("Location");
        stalltablemodel.addColumn("Type");
        stalltablemodel.addColumn("Size");
        stalltablemodel.addColumn("From");
        stalltablemodel.addColumn("To");
        stalltablemodel.addColumn("Status");

        
        stalltablemodel.getDataVector().removeAllElements();
       
        sizetxt1.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                String getLength = sizetxt1.getText();
                String getWidth = sizetxt2.getText();
                
                if(getLength.isEmpty() || getWidth.isEmpty()){
                    
                }else{
                    double length = Integer.parseInt(getLength);
                    double width = Integer.parseInt(getWidth);
                    
                    double area = length * width;
                    
                    areatxt.setText("" + area);
                    
                }
                
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                    String getLength = sizetxt1.getText();
                String getWidth = sizetxt2.getText();
                
                if(getLength.isEmpty() || getWidth.isEmpty()){
                    
                }else{
                    double length = Integer.parseInt(getLength);
                    double width = Integer.parseInt(getWidth);
                    
                    double area = length * width;
                    
                    areatxt.setText("" + area);
                    
                }
                
            }

            @Override
            public void changedUpdate(DocumentEvent e) {

            }
        });
  
        
        sizetxt2.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                String getLength = sizetxt1.getText();
                String getWidth = sizetxt2.getText();
                
                if(getLength.isEmpty() || getWidth.isEmpty()){
                    
                }else{
                    double length = Integer.parseInt(getLength);
                    double width = Integer.parseInt(getWidth);
                    
                    double area = length * width;
                    
                    areatxt.setText("" + area);
                    
                }
                
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                    String getLength = sizetxt1.getText();
                String getWidth = sizetxt2.getText();
                
                if(getLength.isEmpty() || getWidth.isEmpty()){
                    
                }else{
                    double length = Integer.parseInt(getLength);
                    double width = Integer.parseInt(getWidth);
                    
                    double area = length * width;
                    
                    areatxt.setText("" + area);
                    
                }
                
            }

            @Override
            public void changedUpdate(DocumentEvent e) {

            }
        });
  
    }
    
    private void addRoomStalls(String location, String type, String size, String dayfrom, String dayto, String status){
        
        Location locationmodel = new Location();
        LocationView locationview = new LocationView();
        
        LocationsController locationscontroller = new LocationsController(locationmodel, locationview);
        
        locationscontroller.setLocation(location);
        
        int id = Integer.parseInt(locationscontroller.getLocationByName().get(0).toString());
        int capacity = Integer.parseInt(locationscontroller.getLocationByName().get(1).toString());
        
        RoomStall model = new RoomStall();
        RoomsAndStallsView view = new RoomsAndStallsView();
        
        RoomsAndStallsController controller = new RoomsAndStallsController(model, view);
        
         Random random = new Random();
         int stallnum = random.nextInt(capacity) + 1;
                
                      controller.setStallNum(stallnum);
                      controller.setLocationId(id);
                      controller.setType(type);
                      controller.setSize(size);
                      controller.setDayFrom(dayfrom);
                      controller.setDayTo(dayto);
                      controller.setStatus(status);
                      
               int columnCount = controller.checkLocationCapacity();
                
                
               if(columnCount >= capacity){
                  JOptionPane.showMessageDialog(null, "Location Capacity Full");   
                
                      
                }else if(controller.checkStallsAvailability()){
                    JOptionPane.showMessageDialog(null, "Stall Number Unavailable! Add Again");
                  }else{
                    controller.store();
                    JOptionPane.showMessageDialog(null, type + " Added");
                }
               
    }
    private void search(String location, String type){
         
        Location locationmodel = new Location();
        LocationView locationview = new LocationView();
        
        LocationsController locationscontroller = new LocationsController(locationmodel, locationview);
        
        locationscontroller.setLocation(location);
        
        int id = Integer.parseInt(locationscontroller.getLocationByName().get(0).toString());
        
        RoomStall model = new RoomStall();
        RoomsAndStallsView view = new RoomsAndStallsView();
        
        RoomsAndStallsController controller = new RoomsAndStallsController(model, view);
        
         controller.setLocationId(id);
         controller.setType(type);
         
         stalltablemodel.getDataVector().removeAllElements();
         controller.searchRoomsOrStalls();
         
         stallstable.setModel(stalltablemodel);
         stallstable.getColumnModel().getColumn(0).setPreferredWidth(20);
    }
    
    public void delete(int id){
        
        RoomStall model = new RoomStall();
        RoomsAndStallsView view = new RoomsAndStallsView();
        
        RoomsAndStallsController controller = new RoomsAndStallsController(model, view);
        
        controller.setId(id);
        try{
             gettablemodel = (DefaultTableModel) stallstable.getModel();
            gettablemodel.setRowCount(0);
            controller.destroy();
            JOptionPane.showMessageDialog(null, "Stalls Deleted");
        }catch(Exception e){
             JOptionPane.showMessageDialog(null, "Something went wrong");
             e.printStackTrace();
        }
    }

}
